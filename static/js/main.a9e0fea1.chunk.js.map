{"version":3,"sources":["components/standard.js","components/grid_layout.js","components/list_layout.js","data/dummy_data.js","components/layout.js","App.js","serviceWorker.js","index.js"],"names":["StandardCell","className","this","props","container","state","icon","value","name","serial_number","PID","React","Component","ReactGridLayout","WidthProvider","RGL","originalLayout","key","ls","global","localStorage","JSON","parse","getItem","e","console","log","getFromLS","GridLayout","resetLayout","setState","layout","handleDragability","position","target","handleResize","resize","onLayoutChange","setItem","stringify","number_of_grid_column","width_of_grid_item","bind","generateLayout","data","map","i","data-grid","_","item","x","y","Math","floor","w","h","onClick","onChange","isDraggable","isResizable","generateDOM","defaultProps","rowHeight","ListLayout","index","CustomizeLayout","handleChange","dummy_data","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9e0fea1.chunk.js","sourcesContent":["import React from 'react';\nimport { MDBIcon } from \"mdbreact\";\n\nclass StandardCell extends React.Component {\n\n  render(){\n    return (\n      <div>\n        <div className={`container--icons--${this.props.container.state}`}>\n            <MDBIcon className='action--button' icon=\"play\" value=\"start\"/>\n            <MDBIcon className='action--button' icon=\"stop\" value=\"stop\"/>\n            <MDBIcon className='action--button' icon=\"bug\" value=\"debug\"/>\n            <MDBIcon className='action--button' icon=\"check\" value=\"disposition\"/>  \n        </div>\n        \n          \n        <div className='container--name'>NAME: {this.props.container.name}</div>\n        <div className='container--message'>SN: {this.props.container.serial_number}</div>\n        <div className='container--message'>PID: {this.props.container.PID}</div>\n\n      </div>\n      );\n  }\n}\n\nexport default StandardCell;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport StandardCell from './standard'\n\nimport RGL, { WidthProvider } from \"react-grid-layout\";\nconst ReactGridLayout = WidthProvider(RGL);\nconst originalLayout = getFromLS(\"layout\") || [];\n\n\nclass GridLayout extends React.Component {\n  static defaultProps = {\n    className: \"layout\",\n    rowHeight: 30,\n    onLayoutChange: function() {}\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      layout: JSON.parse(JSON.stringify(originalLayout)),\n      number_of_grid_column: 4,\n      width_of_grid_item: 3,\n      position:'view',\n      resize:'resize'\n    };\n\n    this.onLayoutChange = this.onLayoutChange.bind(this);\n  }\n\n  resetLayout = () => {\n    this.setState({\n      layout: []\n    });\n  }\n\n  handleDragability = (e) => {\n    this.setState({\n      position: e.target.value\n    })\n  }\n\n  handleResize = (e) => {\n    this.setState({\n      resize: e.target.value\n    })\n  }\n\n  onLayoutChange = (layout) => {\n    saveToLS(\"layout\", layout);\n    this.setState({ layout });\n    this.props.onLayoutChange(layout); \n  }\n\n  generateDOM() {\n    const layout = this.generateLayout();\n    return this.props.data.map(function(container, i) {\n      return (\n        <div key={i} data-grid={layout[i]}>\n          <StandardCell container={container} />\n        </div>\n      );\n    });\n  }\n\n  generateLayout() {\n    var number_of_grid_column = this.state.number_of_grid_column\n    var width_of_grid_item = this.state.width_of_grid_item\n    return _.map(this.props.data, function(item, i) {\n      return {\n        x: (i% number_of_grid_column) * width_of_grid_item,\n        y: Math.floor((i/number_of_grid_column)) * width_of_grid_item,\n        w: width_of_grid_item,\n        h: width_of_grid_item,\n        i: item.name\n      };\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className='reset--btn'>\n          <button onClick={ this.resetLayout }>Reset Layout</button>\n          <select onChange={this.handleDragability}>\n            <option value=\"view\">View</option>\n            <option value=\"edit\">Edit</option>\n          </select>\n          <select onChange={this.handleResize}>\n            <option value=\"resize\">Resizable</option>\n            <option value=\"nonresize\">Non Resizable</option>\n          </select>\n        </div>\n\n        <ReactGridLayout\n          {...this.props}\n          isDraggable={this.state.position === 'edit' ? true : false}\n          isResizable={this.state.resize === 'resize' ? true : false}\n          layout={this.state.layout}\n          onLayoutChange={this.onLayoutChange}\n        >\n          {this.generateDOM()}\n        </ReactGridLayout>\n      </div>\n    );\n  }\n}\n\nexport default GridLayout;\n\nfunction getFromLS(key) {\n  let ls = {};\n  if (global.localStorage) {\n    try {\n      ls = JSON.parse(global.localStorage.getItem(\"grid-pos\")) || {};\n    } catch (e) {\n      console.log(e)\n    }\n  }\n  return ls[key];\n}\n\nfunction saveToLS(key, value) {\n  if (global.localStorage) {\n    global.localStorage.setItem(\n      \"grid-pos\",\n      JSON.stringify({\n        [key]: value\n      })\n    );\n  }\n}\n","import React from 'react';\nimport StandardCell from './standard'\n\nclass ListLayout extends React.Component {\n\n  render(){\n    return (\n      <div>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.props.data.map((container, index) => {\n\t\t\t\t\t\t\t\t\treturn (\n                    <li key={container.name}>\n                      <StandardCell container={container} />\n                    </li>\n                  );\n\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n      );\n  }\n}\n\nexport default ListLayout;\n","export default\n{\n  data: [\n    {\n     name: 'Container 1',\n     serial_number: 'HSYD7677DY66',\n     PID: 'EXAMPLE-PID-1',\n     state: 'RUNNING'\n    },\n    {\n     name: 'Container 2',\n     serial_number: 'KDJF7765HD99',\n     PID: 'EXAMPLE-PID-2',\n     state: 'PASSED'\n    },\n    {\n     name: 'Container 3',\n     serial_number: 'NCJF6473HD88',\n     PID: 'EXAMPLE-PID-3',\n     state: 'IDLE'\n    },\n    {\n     name: 'Container 4',\n     serial_number: 'KDJW7754PD00',\n     PID: 'EXAMPLE-PID-4',\n     state: 'FAILED'\n    },\n    {\n     name: 'Container 5',\n     serial_number: 'VCGD7654HD88',\n     PID: 'EXAMPLE-PID-5',\n     state: 'RUNNING'\n    },\n    {\n     name: 'Container 6',\n     serial_number: 'BXZD4532GS88',\n     PID: 'EXAMPLE-PID-6',\n     state: 'PASSED'\n    },\n    {\n     name: 'Container 7',\n     serial_number: 'LXNC6737PC00',\n     PID: 'EXAMPLE-PID-7',\n     state: 'RUNNING'\n    },\n    {\n     name: 'Container 8',\n     serial_number: 'BCHG8567HD44',\n     PID: 'EXAMPLE-PID-8',\n     state: 'IDLE'\n    },\n    {\n     name: 'Container 9',\n     serial_number: 'JCGS8743HD97',\n     PID: 'EXAMPLE-PID-9',\n     state: 'RUNNING'\n    },\n    {\n     name: 'Container 10',\n     serial_number: 'JGSU4567FS55',\n     PID: 'EXAMPLE-PID-10',\n     state: 'FAILED'\n    },\n    {\n     name: 'Container 11',\n     serial_number: 'LNXH8740KD99',\n     PID: 'EXAMPLE-PID-11',\n     state: 'PASSED'\n    },\n    {\n     name: 'Container 12',\n     serial_number: 'ZRSG7658HD88',\n     PID: 'EXAMPLE-PID-12',\n     state: 'RUNNING'\n    },\n    {\n     name: 'Container 13',\n     serial_number: 'BCHS8735ND97',\n     PID: 'EXAMPLE-PID-13',\n     state: 'RUNNING'\n    },\n    {\n     name: 'Container 14',\n     serial_number: 'BCHS7689DG56',\n     PID: 'EXAMPLE-PID-14',\n     state: 'RUNNING'\n    },\n    {\n     name: 'Container 15',\n     serial_number: 'VXYS8757HD77',\n     PID: 'EXAMPLE-PID-15',\n     state: 'IDLE'\n    },\n    {\n     name: 'Container 16',\n     serial_number: 'JDGS4297YD53',\n     PID: 'EXAMPLE-PID-16',\n     state: 'PASSED'\n    },\n    {\n     name: 'Container 17',\n     serial_number: 'MCXJ8735TD79',\n     PID: 'EXAMPLE-PID-17',\n     state: 'FAILED'\n    },\n    {\n     name: 'Container 18',\n     serial_number: 'BCHE7656GD81',\n     PID: 'EXAMPLE-PID-18',\n     state: 'PASSED'\n    },\n    {\n     name: 'Container 19',\n     serial_number: 'KJHD8757HD89',\n     PID: 'EXAMPLE-PID-19',\n     state: 'RUNNING'\n    },\n    {\n     name: 'Container 20',\n     serial_number: 'CSHT5347GD61',\n     PID: 'EXAMPLE-PID-20',\n     state: 'FAILED'\n    }\n  ]\n}\n","import React from 'react';\n\nimport ListLayout from './list_layout'\nimport GridLayout from './grid_layout'\nimport dummy_data from './../data/dummy_data'\n\nclass CustomizeLayout extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      layout:'grid',\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      layout: e.target.value\n    })\n  }\n\n  render(){\n    return (\n      <div>\n      <select onChange={this.handleChange} className=\"browser-default custom-select\">\n          <option value=\"grid\">Grid</option>\n          <option value=\"list\">List</option>\n      </select>\n      {(this.state.layout === 'list') ? \n          (<ListLayout data={dummy_data.data}/>) \n          : \n          (<GridLayout data={dummy_data.data}/>)}\n\n      </div>\n      );\n  }\n}\n\nexport default CustomizeLayout;","import React from 'react';\nimport Layout from './components/layout'\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nimport './styles/grid.css';\nimport './styles/container.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    \t<Layout/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}